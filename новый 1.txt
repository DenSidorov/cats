Всем привет.
Если вы чего-то не можете объяснить своими словами - значит вы это не понимаете (Эйнштейн, кажется)
Поймал себя на мысли, что всё что я пока делаю - делаю по аналогии и наитию. И нет чёткой структуры в голове.
Постараюсь изложить своё понимание.
Менторы, поправьте/прокомментируйте пожалуйста. Я пока не пойму так, что сам смогу объяснять - не успокоюсь.
Файл с моделями:
Класс в этом файле это структура базы данных. Если так можно выразится, SQL запрос на создание таблицы в базе записанный на языке Питон.
Сам класс это таблица в базе данных.
Свойства класса это столбцы в этой таблице
Параметры свойств класса это свойства полей столбца.
Команда makemigrations производит перевод с Питона на SQL чтобы запихнуть это всё в базу данных
Методы у этих классов это функции, которые совершают операции с данными их изменяя и потом сохраняя полученные значения в базе.
Методы не экспортируются в базу и если они нам нужны мы обращаемся к ним прямо в файл models.py
Файл с вьюхами:
Класс  в этом файле определяет что мы будем показывать (какие объекты/модели из имеющихся в базе данных) и где (на какой странице). Эти данные не экспортируются в таблицу и если они нам нужны мы работаем с ними из этого файла.
Методы этих классов это функции, которые позволяют нам получать доступ к данным хранящимся в таблицах.
так-же методы позволяют обрабатывать данные введённые пользователем и помещать их в соответствующие поля таблиц.
Вызов методов вьюх происходит автоматически при загрузке страницы на которую вьюха выводит свои данные
Файл с урлами:
Тут мы связываем наши данные с адресами сайта.
конкретнее, какой адрес нужно ввести в строке браузера чтобы получить доступ к вьюхе, которая перенаправит пользователя на нужную страницу и выведет туда данные из соответствующей(их) таблиц(ы) базы данных.
Файл с формами:
Классы в этих файлах это структура формы для ввода данных.
методы этих классов обрабатывают эти данные обновляя таблицы в базе данных или отображая их на странице.
Шаблоны:
Это HTML страницы, которые форматируют вывод вьюхи.
при этом в шаблонах мы можем использовать элементарные условия и обращаться к данным как из вьюхи, так и напрямую из таблиц базы данных.
request - это переменная, где хранятся данные связанные с загруженной на данный момент страницей:
пользователь, какие данные отображены на странице.
это служебное название переменной и мы не меняем его.
def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
get_context_data это метод родительского класса, который мы переопределяем для своих нужд.
в данном примере после вызова нашего метода get_context_data он вызывает метод с таким же названием из родительского класса, и используя функционал однофамильца из родительского класса засовывает в переменную контекст аргументы, которые мы передали своему методу get_context_data при его вызове.
def get_object(self, **kwargs):
Это опять-же стандартный метод родительского класса, который мы переопределяем и через **kwargs скармливаем ему данные вьюхи загруженной страницы
Ну вот пока столько


То-же самое но по моделям и базе данных:
Скелет структуры обращения к данным хранящимся в базе:
Например:
Post.objects.add()
Post - Название таблицы
objects - все объекты(по факту это столбцы) этой таблицы
add - команда, что мы хотим сделать
далее в скобках мы указываем параметры в зависимости от команды:
если мы записываем в таблицу - мы указываем столбцы в которые мы записываем и данные, которые записываем
если мы читаем из таблицы - мы указываем столбцы и критерий по которому нам нужно показать данные
Так-же мы можем сначала запросить из таблицы данные по заданному критерию а потом записать/обновить данные соответствующих полей выбранных строк:
Post.objects.get(id = 1).category.add(Category.objects.get(id=1))
Post - говорим, какая таблица нам нужна
objects - берём все столбцы со всеми записями, которые есть в таблице
get - говорим, что мы хотим что-то получить из таблицы
(id=1) - а получить мы хотим строку в которой записана единица из столбца с названием id
category - выбираем поле запрошенной строки в столбце category
add - записываем туда название категории, которое получили из этой команды (Category.objects.get(id=1)) по описанному принципу.
Это, вроде, мне понятно.
так-же мы можем обращаться к таблицам и их полям непосредственном из html файлов шаблона, но при этом мы обращаемся к данным таблицы, как к объектам класса через точку и в строчном регистре:
{{ category.name }}
другими словами, чтобы получить доступ ка одним и тем-же данным таблицы мы используем разный способ записи этого обращения из .html и из .py.
Если я правильно понимаю работу этого механизма, то эта разница в записи из-за того, что .html файлы не обращаются напрямую в базу, а идут к views.py который в свою очередь обращается к базе через models.py (для этого мы импортируем имена классов из models в views).